/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  PromiseOrValue,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common';

export interface SwapContractInterface extends utils.Interface {
  functions: {
    'calculateValue(address,address)': FunctionFragment;
    'deployerAddress()': FunctionFragment;
    'distributeToken(address,uint256,address)': FunctionFragment;
    'swap(address,address,address,uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'calculateValue'
      | 'deployerAddress'
      | 'distributeToken'
      | 'swap',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'calculateValue',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deployerAddress',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'distributeToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'calculateValue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deployerAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'distributeToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;

  events: {};
}

export interface SwapContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateValue(
      tokenSendAddress: PromiseOrValue<string>,
      tokenReceiveMesureAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { value: BigNumber }>;

    deployerAddress(overrides?: CallOverrides): Promise<[string]>;

    distributeToken(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swap(
      sendTokenAddress: PromiseOrValue<string>,
      measureTokenAddress: PromiseOrValue<string>,
      receiveTokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  calculateValue(
    tokenSendAddress: PromiseOrValue<string>,
    tokenReceiveMesureAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  deployerAddress(overrides?: CallOverrides): Promise<string>;

  distributeToken(
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swap(
    sendTokenAddress: PromiseOrValue<string>,
    measureTokenAddress: PromiseOrValue<string>,
    receiveTokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateValue(
      tokenSendAddress: PromiseOrValue<string>,
      tokenReceiveMesureAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deployerAddress(overrides?: CallOverrides): Promise<string>;

    distributeToken(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    swap(
      sendTokenAddress: PromiseOrValue<string>,
      measureTokenAddress: PromiseOrValue<string>,
      receiveTokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateValue(
      tokenSendAddress: PromiseOrValue<string>,
      tokenReceiveMesureAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deployerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    distributeToken(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swap(
      sendTokenAddress: PromiseOrValue<string>,
      measureTokenAddress: PromiseOrValue<string>,
      receiveTokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateValue(
      tokenSendAddress: PromiseOrValue<string>,
      tokenReceiveMesureAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deployerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeToken(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swap(
      sendTokenAddress: PromiseOrValue<string>,
      measureTokenAddress: PromiseOrValue<string>,
      receiveTokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
