/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types';
import { ethers } from 'ethers';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'AuroraToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AuroraToken__factory>;
    getContractFactory(
      name: 'DaiToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DaiToken__factory>;
    getContractFactory(
      name: 'EthToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.EthToken__factory>;
    getContractFactory(
      name: 'PolygonToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PolygonToken__factory>;
    getContractFactory(
      name: 'ShibainuToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ShibainuToken__factory>;
    getContractFactory(
      name: 'SolanaToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SolanaToken__factory>;
    getContractFactory(
      name: 'TetherToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TetherToken__factory>;
    getContractFactory(
      name: 'UNCHToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UNCHToken__factory>;
    getContractFactory(
      name: 'UniswapToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniswapToken__factory>;
    getContractFactory(
      name: 'SwapContract',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SwapContract__factory>;

    getContractAt(
      name: 'ERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'IERC20Metadata',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'AuroraToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AuroraToken>;
    getContractAt(
      name: 'DaiToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DaiToken>;
    getContractAt(
      name: 'EthToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.EthToken>;
    getContractAt(
      name: 'PolygonToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PolygonToken>;
    getContractAt(
      name: 'ShibainuToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ShibainuToken>;
    getContractAt(
      name: 'SolanaToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.SolanaToken>;
    getContractAt(
      name: 'TetherToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TetherToken>;
    getContractAt(
      name: 'UNCHToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.UNCHToken>;
    getContractAt(
      name: 'UniswapToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.UniswapToken>;
    getContractAt(
      name: 'SwapContract',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.SwapContract>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer,
    ): Promise<ethers.Contract>;
  }
}
