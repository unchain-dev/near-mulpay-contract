/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import {
  Contract,
  ContractFactory,
  PayableOverrides,
  Signer,
  utils,
} from 'ethers';

import type { PromiseOrValue } from '../../../common';
import type {
  SwapContract,
  SwapContractInterface,
} from '../../../contracts/Swap.sol/SwapContract';

const _abi = [
  {
    inputs: [],
    stateMutability: 'payable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'tokenSendAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'tokenReceiveMesureAddress',
        type: 'address',
      },
    ],
    name: 'calculateValue',
    outputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'deployerAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'tokenAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'recipientAddress',
        type: 'address',
      },
    ],
    name: 'distributeToken',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sendTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'measureTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'receiveTokenAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'recipientAddress',
        type: 'address',
      },
    ],
    name: 'swap',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c2f806100536000396000f3fe60806040526004361061003f5760003560e01c8063677fdac814610044578063714a091d146100605780639fb27b4314610089578063efdee94f146100c6575b600080fd5b61005e600480360381019061005991906106d2565b6100f1565b005b34801561006c57600080fd5b506100876004803603810190610082919061074d565b6103e2565b005b34801561009557600080fd5b506100b060048036038101906100ab91906107a0565b6104fa565b6040516100bd91906107ef565b60405180910390f35b3480156100d257600080fd5b506100db610615565b6040516100e89190610819565b60405180910390f35b60008590506000849050600061010788886104fa565b9050600061011587896104fa565b90506000670de0b6b3a7640000838861012e9190610863565b61013891906108d4565b90506000670de0b6b3a764000083896101519190610863565b61015b91906108d4565b9050818673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101979190610819565b602060405180830381865afa1580156101b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d8919061091a565b1015610219576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610210906109ca565b60405180910390fd5b808573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102539190610819565b602060405180830381865afa158015610270573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610294919061091a565b10156102d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cc90610a82565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161031293929190610aa2565b6020604051808303816000875af1158015610331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103559190610b11565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88836040518363ffffffff1660e01b8152600401610391929190610b3e565b6020604051808303816000875af11580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d49190610b11565b505050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046790610bd9565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83856040518363ffffffff1660e01b81526004016104b0929190610b3e565b6020604051808303816000875af11580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190610b11565b5050505050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105359190610819565b602060405180830381865afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610576919061091a565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105af9190610819565b602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f0919061091a565b670de0b6b3a76400006106039190610863565b61060d91906108d4565b905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106698261063e565b9050919050565b6106798161065e565b811461068457600080fd5b50565b60008135905061069681610670565b92915050565b6000819050919050565b6106af8161069c565b81146106ba57600080fd5b50565b6000813590506106cc816106a6565b92915050565b600080600080600060a086880312156106ee576106ed610639565b5b60006106fc88828901610687565b955050602061070d88828901610687565b945050604061071e88828901610687565b935050606061072f888289016106bd565b925050608061074088828901610687565b9150509295509295909350565b60008060006060848603121561076657610765610639565b5b600061077486828701610687565b9350506020610785868287016106bd565b925050604061079686828701610687565b9150509250925092565b600080604083850312156107b7576107b6610639565b5b60006107c585828601610687565b92505060206107d685828601610687565b9150509250929050565b6107e98161069c565b82525050565b600060208201905061080460008301846107e0565b92915050565b6108138161065e565b82525050565b600060208201905061082e600083018461080a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061086e8261069c565b91506108798361069c565b92508282026108878161069c565b9150828204841483151761089e5761089d610834565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006108df8261069c565b91506108ea8361069c565b9250826108fa576108f96108a5565b5b828204905092915050565b600081519050610914816106a6565b92915050565b6000602082840312156109305761092f610639565b5b600061093e84828501610905565b91505092915050565b600082825260208201905092915050565b7f596f757220617373657420697320736d616c6c6572207468616e20616d6f756e60008201527f7420796f752077616e7420746f2073656e640000000000000000000000000000602082015250565b60006109b4603283610947565b91506109bf82610958565b604082019050919050565b600060208201905081810360008301526109e3816109a7565b9050919050565b7f436f6e7472616374206173736574206f66207468652063757272656e6379207260008201527f6563697069656e742077616e7420697320736d616c6c6572207468616e20616d60208201527f6f756e7420796f752077616e7420746f2073656e640000000000000000000000604082015250565b6000610a6c605583610947565b9150610a77826109ea565b606082019050919050565b60006020820190508181036000830152610a9b81610a5f565b9050919050565b6000606082019050610ab7600083018661080a565b610ac4602083018561080a565b610ad160408301846107e0565b949350505050565b60008115159050919050565b610aee81610ad9565b8114610af957600080fd5b50565b600081519050610b0b81610ae5565b92915050565b600060208284031215610b2757610b26610639565b5b6000610b3584828501610afc565b91505092915050565b6000604082019050610b53600083018561080a565b610b6060208301846107e0565b9392505050565b7f416e796f6e6520627574206465706c6f7965722063616e20646973747269627560008201527f746520746f6b656e210000000000000000000000000000000000000000000000602082015250565b6000610bc3602983610947565b9150610bce82610b67565b604082019050919050565b60006020820190508181036000830152610bf281610bb6565b905091905056fea2646970667358221220bf3396cbb51745c060f9e6922ef233abc6d01d45bbd7fd1768f58f48d639d36364736f6c63430008110033';

type SwapContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapContractConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapContract__factory extends ContractFactory {
  constructor(...args: SwapContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<SwapContract> {
    return super.deploy(overrides || {}) as Promise<SwapContract>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapContract {
    return super.attach(address) as SwapContract;
  }
  override connect(signer: Signer): SwapContract__factory {
    return super.connect(signer) as SwapContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapContractInterface {
    return new utils.Interface(_abi) as SwapContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): SwapContract {
    return new Contract(address, _abi, signerOrProvider) as SwapContract;
  }
}
